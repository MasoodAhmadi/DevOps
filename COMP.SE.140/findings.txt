Containers share specific resources with the host depending on how they are configured. For example, containers can share the hostâ€™s network stack if configured with `network_mode: host`. Typically, each container has its own isolated network namespace, but can be assigned to user-defined Docker networks. Containers can also share volumes with the host to persist data, which allows directories or files to be synchronized between the container and the host. 

In this exercise, both service1 and service2 run in a Docker bridge network, meaning they share an isolated network, while only specified ports are exposed to the host. Furthermore, volumes or bind mounts can allow shared access to files between containers and the host, though none were used explicitly in this setup. Another important sharing aspect is CPU and memory usage, which are limited to what is available on the host unless further resource constraints are applied.